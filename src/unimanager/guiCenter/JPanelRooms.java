package unimanager.guiCenter;

import unimanager.appCenter.RoomManager;
import javax.swing.JOptionPane;
import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Prof. Werner Burkard
 */
public class JPanelRooms extends javax.swing.JPanel
{

    RoomManager myRoomManager = RoomManager.getTheRoomManager();

    /**
     * Creates new form JPanelStudents
     */
    public JPanelRooms()
    {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jDialogNewRoom = new javax.swing.JDialog();
        jButtonCancelNewRoom = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jTextFieldRoomID = new javax.swing.JTextField();
        jTextFieldDescription = new javax.swing.JTextField();
        jButtonAddNewRoom = new javax.swing.JButton();
        jTextFieldCapacity = new javax.swing.JTextField();
        jTextFieldBuilding = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabelTitle = new javax.swing.JLabel();
        jScrollPaneRooms = new javax.swing.JScrollPane();
        jTableRooms = new javax.swing.JTable(){
            public boolean isCellEditable(int row, int col){
                return col != 0;
            }
        };
        jButtonRoomList = new javax.swing.JButton();
        jButtonNewRoom = new javax.swing.JButton();
        jButtonDeleteRoom = new javax.swing.JButton();

        jDialogNewRoom.setTitle("Add new Room");
        jDialogNewRoom.setModal(true);
        jDialogNewRoom.setResizable(false);
        jDialogNewRoom.setSize(new java.awt.Dimension(400, 300));

        jButtonCancelNewRoom.setText("cancel");
        jButtonCancelNewRoom.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCancelNewRoomActionPerformed(evt);
            }
        });

        jLabel2.setText("Room iD");

        jLabel3.setText("Description");

        jTextFieldDescription.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldDescriptionActionPerformed(evt);
            }
        });

        jButtonAddNewRoom.setText("add room");
        jButtonAddNewRoom.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAddNewRoomActionPerformed(evt);
            }
        });

        jLabel4.setText("Room Capacity");

        jLabel5.setText("Building");

        javax.swing.GroupLayout jDialogNewRoomLayout = new javax.swing.GroupLayout(jDialogNewRoom.getContentPane());
        jDialogNewRoom.getContentPane().setLayout(jDialogNewRoomLayout);
        jDialogNewRoomLayout.setHorizontalGroup(
            jDialogNewRoomLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jDialogNewRoomLayout.createSequentialGroup()
                .addContainerGap(219, Short.MAX_VALUE)
                .addComponent(jButtonAddNewRoom)
                .addGap(31, 31, 31)
                .addComponent(jButtonCancelNewRoom)
                .addContainerGap())
            .addGroup(jDialogNewRoomLayout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addGroup(jDialogNewRoomLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4)
                    .addComponent(jLabel5))
                .addGap(26, 26, 26)
                .addGroup(jDialogNewRoomLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jTextFieldBuilding)
                    .addComponent(jTextFieldCapacity)
                    .addComponent(jTextFieldRoomID)
                    .addComponent(jTextFieldDescription, javax.swing.GroupLayout.DEFAULT_SIZE, 207, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jDialogNewRoomLayout.setVerticalGroup(
            jDialogNewRoomLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jDialogNewRoomLayout.createSequentialGroup()
                .addGap(65, 65, 65)
                .addGroup(jDialogNewRoomLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jTextFieldRoomID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jDialogNewRoomLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jTextFieldDescription, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(27, 27, 27)
                .addGroup(jDialogNewRoomLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextFieldCapacity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addGap(18, 18, 18)
                .addGroup(jDialogNewRoomLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextFieldBuilding, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 58, Short.MAX_VALUE)
                .addGroup(jDialogNewRoomLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonCancelNewRoom)
                    .addComponent(jButtonAddNewRoom))
                .addContainerGap())
        );

        jLabelTitle.setText("Rooms Management");

        jTableRooms.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] { },
            new String [] {
                "Room ID", "Description", "Capacity", "Building"
            }
        ));
        jTableRooms.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPaneRooms.setViewportView(jTableRooms);

        jButtonRoomList.setText("print room list");
        jButtonRoomList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonRoomListActionPerformed(evt);
            }
        });

        jButtonNewRoom.setText("add room");
        jButtonNewRoom.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonNewRoomActionPerformed(evt);
            }
        });

        jButtonDeleteRoom.setText("delete room");
        jButtonDeleteRoom.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDeleteRoomActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addComponent(jButtonNewRoom)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 41, Short.MAX_VALUE)
                .addComponent(jButtonDeleteRoom)
                .addGap(35, 35, 35)
                .addComponent(jButtonRoomList)
                .addGap(28, 28, 28))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabelTitle)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addComponent(jScrollPaneRooms, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabelTitle)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPaneRooms, javax.swing.GroupLayout.DEFAULT_SIZE, 247, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonRoomList)
                    .addComponent(jButtonDeleteRoom)
                    .addComponent(jButtonNewRoom)))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonRoomListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonRoomListActionPerformed
        // print out a list of all available rooms
        DefaultTableModel model = (DefaultTableModel) jTableRooms.getModel();
        int numberOfRooms = model.getRowCount();
        System.out.println("List of current rooms in jTable Model:");
        for (int row = 0; row < numberOfRooms; row++)
        {
            System.out.print(row + ". Room:");
            for (int column = 0; column < 4; column++)
            {
                System.out.print(" " + model.getValueAt(row, column));
            }
            System.out.println();
        }
        System.out.println("List of current rooms in the list of myRoomManager:");
        myRoomManager.printAllRooms();
    }//GEN-LAST:event_jButtonRoomListActionPerformed

    private void jButtonDeleteRoomActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDeleteRoomActionPerformed
        DefaultTableModel model = (DefaultTableModel) jTableRooms.getModel();
        //Delete selected row if possible       
        int selectedRowForDeletion = jTableRooms.getSelectedRow();
        //Check if there is a row selected
        if ((selectedRowForDeletion < 0))
        {  // no row selected!
            JOptionPane.showMessageDialog(this, "Sorry, no room selected!");
            return; // nothing more to do
        }
        // Okay, a row is selected: get the data of that row in first column
        String room = model.getValueAt(selectedRowForDeletion, 0).toString();
        // Check whether row shows indeed a room
        if (room.equals("null"))
        {  // no room in row!
            JOptionPane.showMessageDialog(this, "Sorry, no room number!");
            return; // because: nothing more to do 
        }
        // Okay, a room is really in that row!
        // ask for confirmation before deletion!
        int answer = JOptionPane.showConfirmDialog(this,
                "Really delete " + room + "?",
                "Please confirm",
                JOptionPane.YES_NO_OPTION,
                JOptionPane.QUESTION_MESSAGE);
        if (answer == JOptionPane.YES_OPTION)
        {
            myRoomManager.delete(room); // call Room Manager to delete room from List
            model.removeRow(selectedRowForDeletion); // also delete it from jTable
            JOptionPane.showMessageDialog(this, "Room deleted");
        }

    }//GEN-LAST:event_jButtonDeleteRoomActionPerformed

    private void jButtonCancelNewRoomActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCancelNewRoomActionPerformed
        jDialogNewRoom.setVisible(false);
    }//GEN-LAST:event_jButtonCancelNewRoomActionPerformed

    private void jButtonNewRoomActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonNewRoomActionPerformed
        jDialogNewRoom.setLocationRelativeTo(this);
        jDialogNewRoom.setVisible(true);
    }//GEN-LAST:event_jButtonNewRoomActionPerformed

    private void jTextFieldDescriptionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldDescriptionActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldDescriptionActionPerformed

    private void jButtonAddNewRoomActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAddNewRoomActionPerformed
        // check and validate the user input for the new room
        // do nothing in case of invalid data
        String theRoomID = jTextFieldRoomID.getText().trim();
        String theDescription = jTextFieldDescription.getText().trim();
        String stringCapacity = jTextFieldCapacity.getText().trim();
        String theRoomBuilding = jTextFieldBuilding.getText().trim();

        int theCapacity;  // (number of seats a room has)

        // Check theRoomID
        if (!myRoomManager.isValidRoomID(theRoomID))
        { // theRoomID is invalid: nothing in ID field!
            JOptionPane.showMessageDialog(this, "invalid room ID!", "Input error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        // Check theDescription
        if (!myRoomManager.isValidRoomDescription(theDescription))
        { // nothing in description field!
            JOptionPane.showMessageDialog(this, "invalid room Description!", "Input error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        // Check theCapacity 
        theCapacity = myRoomManager.intValueOfCapacity(stringCapacity);
        if (theCapacity < 0)
        { // error in capacity text field!
            JOptionPane.showMessageDialog(this, "invalid room Capacity!", "Input error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Check theRoomBuilding
        if (!myRoomManager.isValidRoomBuilding(theRoomBuilding))
        { // nothing in Building field!
            JOptionPane.showMessageDialog(this, "Missing room Building!", "Input error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // all 4 input fields are okay, so let us make the new room
        if (myRoomManager.addRoom(theRoomID, theDescription, theCapacity, theRoomBuilding))
        {
            // Room Manager sends <true>, if room was added succesfully to the list
            // so add the room also to the jTable model
            DefaultTableModel model = (DefaultTableModel) jTableRooms.getModel();
            model.addRow(new Object[]
            {
                theRoomID, theDescription, theCapacity, theRoomBuilding
            });

            // creating another new room?
            int answer = JOptionPane.showConfirmDialog(this, "Adding another room?", "Room added", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
            if (answer == JOptionPane.NO_OPTION)
            {
                jDialogNewRoom.setVisible(false);  // ... so disappaer from screen
            }
        }
        else
        {  // Room Manager could not add that room!
            JOptionPane.showMessageDialog(this, "Room already exists!", "Sorry", JOptionPane.ERROR_MESSAGE);
        }

    }//GEN-LAST:event_jButtonAddNewRoomActionPerformed
    private void handleRoomUpdate(javax.swing.event.TableModelEvent event)
    {
        DefaultTableModel model = (DefaultTableModel) jTableRooms.getModel();
        int row = event.getFirstRow();
        int col = event.getColumn();
        String newData = model.getValueAt(row, col).toString();
        String theRoomID = model.getValueAt(row, 0).toString();
        String theDescription;
        int theCapacity;
        String theRoomBuilding;
        System.out.println("Update-Event for room= " + theRoomID + " in column= " + (col + 1) + " New data is= " + newData);
        // Next we have to check the updated field and if invalid: we have to restore it from rooms list
        switch (col)
        {  //which column is affected?
            case 1:  // changing in description happend
                if (myRoomManager.isValidRoomDescription(newData))
                {
                    // new data is okay, so update the room in managers list
                    myRoomManager.updateDescription(theRoomID, newData);
                }
                else
                {
                    //new data is NOT okay, so reset input field and warn user
                    theDescription = myRoomManager.getRoom(theRoomID).getDescription();
                    model.setValueAt(theDescription, row, col);
                    JOptionPane.showMessageDialog(this, "invalid room Description!", "Input error", JOptionPane.ERROR_MESSAGE);
                }
                break;
            case 2:  // changing in capacity happend
                theCapacity = myRoomManager.intValueOfCapacity(newData);
                if (theCapacity >= 0)
                {
                    // new capacity is okay, so update the room in managers list
                    myRoomManager.updateCapacity(theRoomID, theCapacity);
                }
                else
                {
                    //new data is NOT okay, so reset input field and warn user
                    theCapacity = myRoomManager.getRoom(theRoomID).getCapacity();
                    model.setValueAt(theCapacity, row, col);
                    JOptionPane.showMessageDialog(this, "invalid room capacity!", "Input error", JOptionPane.ERROR_MESSAGE);
                }
                break;
            case 3:  // changing in building happend
                if (myRoomManager.isValidRoomBuilding(newData))
                {
                    // new data is okay, so update the room in managers list
                    myRoomManager.updateBuilding(theRoomID, newData);
                }
                else
                {
                    //new data is NOT okay, so reset input field and warn user
                    theRoomBuilding = myRoomManager.getRoom(theRoomID).getBuilding();
                    model.setValueAt(theRoomBuilding, row, col);
                    JOptionPane.showMessageDialog(this, "invalid room building!", "Input error", JOptionPane.ERROR_MESSAGE);
                }
                break;
            default:
                break; // Do nothing by default
        }

    }

    public void init()
    {
        // 1. load all rooms managed by the room manager in our jtable
        DefaultTableModel myModel = (DefaultTableModel) jTableRooms.getModel();
        myRoomManager.fillModel(myModel);

        // 2. define a TableModelListener to handle room table updates
        myModel.addTableModelListener(new TableModelListener()
        {
            // we only handle update events!
            @Override
            public void tableChanged(TableModelEvent ev)
            {
                if (ev.getType() == javax.swing.event.TableModelEvent.UPDATE)
                {
                    handleRoomUpdate(ev);
                }
            }
        });

    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonAddNewRoom;
    private javax.swing.JButton jButtonCancelNewRoom;
    private javax.swing.JButton jButtonDeleteRoom;
    private javax.swing.JButton jButtonNewRoom;
    private javax.swing.JButton jButtonRoomList;
    private javax.swing.JDialog jDialogNewRoom;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabelTitle;
    private javax.swing.JScrollPane jScrollPaneRooms;
    private javax.swing.JTable jTableRooms;
    private javax.swing.JTextField jTextFieldBuilding;
    private javax.swing.JTextField jTextFieldCapacity;
    private javax.swing.JTextField jTextFieldDescription;
    private javax.swing.JTextField jTextFieldRoomID;
    // End of variables declaration//GEN-END:variables
}
